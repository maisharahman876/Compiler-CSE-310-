Line no 1: Token <COMMENT> Lexeme //RELOP and Logicop checking and print func and array found

Line 2: type_specifier : INT

int

Line 3: type_specifier : INT

int

Line 3: declaration_list : ID

c

Line 3: declaration_list : declaration_list COMMA ID

c,i

Line 3: declaration_list : declaration_list COMMA ID

c,i,j

Line 3: declaration_list : declaration_list COMMA ID

c,i,j,d

Line 3: declaration_list : declaration_list COMMA ID LTHIRD CONST_INT RTHIRD

c,i,j,d,e[4]

Line 3: var_declaration : type_specifier declaration_list SEMICOLON

int c,i,j,d,e[4];


Line 3: statement : var_declaration

int c,i,j,d,e[4];


Line 3: statements : statement

int c,i,j,d,e[4];


Line 4: factor : CONST_INT

0

Line 4: unary_expression : factor

0

Line 4: term : unary_expression

0

Line 4: simple_expression : term 

0

Line 4: rel_expression : simple_expression

0

Line 4: logic_expression : rel_expression 

0

Line 4: expression : logic expression

0

Line 4: variable : ID LTHIRD expression RTHIRD 

e[0]

Line 4: factor : CONST_INT

2

Line 4: unary_expression : factor

2

Line 4: term : unary_expression

2

Line 4: simple_expression : term 

2

Line 4: rel_expression : simple_expression

2

Line 4: logic_expression : rel_expression 

2

Line 4: expression : variable ASSIGNOP logic_expression

e[0]=2

Line 4: expression_statement : expression SEMICOLON

e[0]=2;


Line 4: statement : expression_statement

e[0]=2;


Line 4: statements : statements statement

int c,i,j,d,e[4];
e[0]=2;


Line 5: factor : CONST_INT

1

Line 5: unary_expression : factor

1

Line 5: term : unary_expression

1

Line 5: simple_expression : term 

1

Line 5: rel_expression : simple_expression

1

Line 5: logic_expression : rel_expression 

1

Line 5: expression : logic expression

1

Line 5: variable : ID LTHIRD expression RTHIRD 

e[1]

Line 5: factor : CONST_INT

3

Line 5: unary_expression : factor

3

Line 5: term : unary_expression

3

Line 5: simple_expression : term 

3

Line 5: rel_expression : simple_expression

3

Line 5: logic_expression : rel_expression 

3

Line 5: expression : variable ASSIGNOP logic_expression

e[1]=3

Line 5: expression_statement : expression SEMICOLON

e[1]=3;


Line 5: statement : expression_statement

e[1]=3;


Line 5: statements : statements statement

int c,i,j,d,e[4];
e[0]=2;
e[1]=3;


Line 6: variable : ID

j

Line 6: factor : CONST_INT

1

Line 6: unary_expression : factor

1

Line 6: term : unary_expression

1

Line 6: simple_expression : term 

1

Line 6: rel_expression : simple_expression

1

Line 6: logic_expression : rel_expression 

1

Line 6: expression : logic expression

1

Line 6: variable : ID LTHIRD expression RTHIRD 

e[1]

Line 6: factor : variable 

e[1]

Line 6: unary_expression : factor

e[1]

Line 6: term : unary_expression

e[1]

Line 6: simple_expression : term 

e[1]

Line 6: factor : CONST_INT

5

Line 6: unary_expression : factor

5

Line 6: term : unary_expression

5

Line 6: simple_expression : term 

5

Line 6: rel_expression : simple_expression RELOP simple_expression

e[1]>5

Line 6: logic_expression : rel_expression 

e[1]>5

Line 6: expression : logic expression

e[1]>5

Line 6: factor : LPAREN expression RPAREN

(e[1]>5)

Line 6: unary_expression : factor

(e[1]>5)

Line 6: term : unary_expression

(e[1]>5)

Line 6: simple_expression : term 

(e[1]>5)

Line 6: rel_expression : simple_expression

(e[1]>5)

Line 6: logic_expression : rel_expression 

(e[1]>5)

Line 6: expression : variable ASSIGNOP logic_expression

j=(e[1]>5)

Line 6: expression_statement : expression SEMICOLON

j=(e[1]>5);


Line 6: statement : expression_statement

j=(e[1]>5);


Line 6: statements : statements statement

int c,i,j,d,e[4];
e[0]=2;
e[1]=3;
j=(e[1]>5);


Line 7: variable : ID

c

Line 7: factor : CONST_INT

2

Line 7: unary_expression : factor

2

Line 7: term : unary_expression

2

Line 7: simple_expression : term 

2

Line 7: rel_expression : simple_expression

2

Line 7: logic_expression : rel_expression 

2

Line 7: expression : variable ASSIGNOP logic_expression

c=2

Line 7: expression_statement : expression SEMICOLON

c=2;


Line 7: statement : expression_statement

c=2;


Line 7: statements : statements statement

int c,i,j,d,e[4];
e[0]=2;
e[1]=3;
j=(e[1]>5);
c=2;


Line 8: variable : ID

j

Line 8: factor : CONST_INT

2

Line 8: unary_expression : factor

2

Line 8: term : unary_expression

2

Line 8: factor : CONST_INT

3

Line 8: unary_expression : factor

3

Line 8: term : term MULOP unary_expression

2*3

Line 8: simple_expression : term 

2*3

Line 8: factor : CONST_INT

5

Line 8: unary_expression : factor

5

Line 8: term : unary_expression

5

Line 8: simple_expression : term 

5

Line 8: rel_expression : simple_expression

5

Line 8: factor : CONST_INT

3

Line 8: unary_expression : factor

3

Line 8: term : unary_expression

3

Line 8: simple_expression : term 

3

Line 8: rel_expression : simple_expression

3

Line 8: logic_expression : rel_expression LOGICOP rel_expression

5&&3

Line 8: expression : logic expression

5&&3

Line 8: factor : LPAREN expression RPAREN

(5&&3)

Line 8: unary_expression : factor

(5&&3)

Line 8: term : unary_expression

(5&&3)

Line 8: simple_expression : simple_expression ADDOP term 

2*3+(5&&3)

Line 8: factor : CONST_INT

2

Line 8: unary_expression : factor

2

Line 8: term : unary_expression

2

Line 8: simple_expression : simple_expression ADDOP term 

2*3+(5&&3)+2

Line 8: rel_expression : simple_expression

2*3+(5&&3)+2

Line 8: logic_expression : rel_expression 

2*3+(5&&3)+2

Line 8: expression : variable ASSIGNOP logic_expression

j=2*3+(5&&3)+2

Line 8: expression_statement : expression SEMICOLON

j=2*3+(5&&3)+2;


Line 8: statement : expression_statement

j=2*3+(5&&3)+2;


Line 8: statements : statements statement

int c,i,j,d,e[4];
e[0]=2;
e[1]=3;
j=(e[1]>5);
c=2;
j=2*3+(5&&3)+2;


Line 9: variable : ID

d

Line 9: variable : ID

i

Line 9: factor : variable 

i

Line 9: unary_expression : factor

i

Line 9: term : unary_expression

i

Line 9: simple_expression : term 

i

Line 9: factor : CONST_INT

1

Line 9: unary_expression : factor

1

Line 9: term : unary_expression

1

Line 9: simple_expression : term 

1

Line 9: rel_expression : simple_expression RELOP simple_expression

i<1

Line 9: logic_expression : rel_expression 

i<1

Line 9: expression : logic expression

i<1

Line 9: factor : LPAREN expression RPAREN

(i<1)

Line 9: unary_expression : factor

(i<1)

Line 9: term : unary_expression

(i<1)

Line 9: simple_expression : term 

(i<1)

Line 9: rel_expression : simple_expression

(i<1)

Line 9: logic_expression : rel_expression 

(i<1)

Line 9: expression : variable ASSIGNOP logic_expression

d=(i<1)

Line 9: expression_statement : expression SEMICOLON

d=(i<1);


Line 9: statement : expression_statement

d=(i<1);


Line 9: statements : statements statement

int c,i,j,d,e[4];
e[0]=2;
e[1]=3;
j=(e[1]>5);
c=2;
j=2*3+(5&&3)+2;
d=(i<1);


Line no 9: Token <COMMENT> Lexeme //d=0; found

Line 10: variable : ID

i

Line 10: variable : ID

d

Line 10: factor : variable 

d

Line 10: unary_expression : factor

d

Line 10: term : unary_expression

d

Line 10: simple_expression : term 

d

Line 10: rel_expression : simple_expression

d

Line 10: factor : CONST_INT

0

Line 10: unary_expression : factor

0

Line 10: term : unary_expression

0

Line 10: simple_expression : term 

0

Line 10: rel_expression : simple_expression

0

Line 10: logic_expression : rel_expression LOGICOP rel_expression

d||0

Line 10: expression : variable ASSIGNOP logic_expression

i=d||0

Line 10: expression_statement : expression SEMICOLON

i=d||0;


Line 10: statement : expression_statement

i=d||0;


Line 10: statements : statements statement

int c,i,j,d,e[4];
e[0]=2;
e[1]=3;
j=(e[1]>5);
c=2;
j=2*3+(5&&3)+2;
d=(i<1);
i=d||0;


Line no 10: Token <COMMENT> Lexeme //i=0 found

Line 11: variable : ID

d

Line 11: variable : ID

c

Line 11: factor : variable 

c

Line 11: unary_expression : factor

c

Line 11: term : unary_expression

c

Line 11: simple_expression : term 

c

Line 11: rel_expression : simple_expression

c

Line 11: variable : ID

d

Line 11: factor : variable 

d

Line 11: unary_expression : factor

d

Line 11: term : unary_expression

d

Line 11: simple_expression : term 

d

Line 11: factor : CONST_INT

1

Line 11: unary_expression : factor

1

Line 11: term : unary_expression

1

Line 11: simple_expression : term 

1

Line 11: rel_expression : simple_expression RELOP simple_expression

d!=1

Line 11: logic_expression : rel_expression 

d!=1

Line 11: expression : logic expression

d!=1

Line 11: factor : LPAREN expression RPAREN

(d!=1)

Line 11: unary_expression : factor

(d!=1)

Line 11: term : unary_expression

(d!=1)

Line 11: simple_expression : term 

(d!=1)

Line 11: rel_expression : simple_expression

(d!=1)

Line 11: logic_expression : rel_expression LOGICOP rel_expression

c&&(d!=1)

Line 11: expression : variable ASSIGNOP logic_expression

d=c&&(d!=1)

Line 11: expression_statement : expression SEMICOLON

d=c&&(d!=1);


Line 11: statement : expression_statement

d=c&&(d!=1);


Line 11: statements : statements statement

int c,i,j,d,e[4];
e[0]=2;
e[1]=3;
j=(e[1]>5);
c=2;
j=2*3+(5&&3)+2;
d=(i<1);
i=d||0;
d=c&&(d!=1);


Line no 11: Token <COMMENT> Lexeme //d=1 found

Line 12: variable : ID

j

Line 12: factor : CONST_INT

50

Line 12: unary_expression : factor

50

Line 12: term : unary_expression

50

Line 12: simple_expression : term 

50

Line 12: rel_expression : simple_expression

50

Line 12: logic_expression : rel_expression 

50

Line 12: expression : variable ASSIGNOP logic_expression

j=50

Line 12: expression_statement : expression SEMICOLON

j=50;


Line 12: statement : expression_statement

j=50;


Line 12: statements : statements statement

int c,i,j,d,e[4];
e[0]=2;
e[1]=3;
j=(e[1]>5);
c=2;
j=2*3+(5&&3)+2;
d=(i<1);
i=d||0;
d=c&&(d!=1);
j=50;


Line 13: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(j);


Line 13: statements : statements statement

int c,i,j,d,e[4];
e[0]=2;
e[1]=3;
j=(e[1]>5);
c=2;
j=2*3+(5&&3)+2;
d=(i<1);
i=d||0;
d=c&&(d!=1);
j=50;
printf(j);


Line 14: factor : CONST_INT

0

Line 14: unary_expression : factor

0

Line 14: term : unary_expression

0

Line 14: simple_expression : term 

0

Line 14: rel_expression : simple_expression

0

Line 14: logic_expression : rel_expression 

0

Line 14: expression : logic expression

0

Line 14: statement : RETURN expression SEMICOLON

return 0;


Line 14: statements : statements statement

int c,i,j,d,e[4];
e[0]=2;
e[1]=3;
j=(e[1]>5);
c=2;
j=2*3+(5&&3)+2;
d=(i<1);
i=d||0;
d=c&&(d!=1);
j=50;
printf(j);
return 0;


Line 15: compound_statement : LCURL statements RCURL

{
int c,i,j,d,e[4];
e[0]=2;
e[1]=3;
j=(e[1]>5);
c=2;
j=2*3+(5&&3)+2;
d=(i<1);
i=d||0;
d=c&&(d!=1);
j=50;
printf(j);
return 0;
}


ScopeTable # 1.1
 9 --> < c , ID > 
 10 --> < d , ID > 
 11 --> < e , ID > 
 15 --> < i , ID > 
 16 --> < j , ID > 

ScopeTable # 1
 1 --> < main , ID > 

Line 15: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int c,i,j,d,e[4];
e[0]=2;
e[1]=3;
j=(e[1]>5);
c=2;
j=2*3+(5&&3)+2;
d=(i<1);
i=d||0;
d=c&&(d!=1);
j=50;
printf(j);
return 0;
}


Line 15: unit : func_definition

int main(){
int c,i,j,d,e[4];
e[0]=2;
e[1]=3;
j=(e[1]>5);
c=2;
j=2*3+(5&&3)+2;
d=(i<1);
i=d||0;
d=c&&(d!=1);
j=50;
printf(j);
return 0;
}


Line 15: program : unit

int main(){
int c,i,j,d,e[4];
e[0]=2;
e[1]=3;
j=(e[1]>5);
c=2;
j=2*3+(5&&3)+2;
d=(i<1);
i=d||0;
d=c&&(d!=1);
j=50;
printf(j);
return 0;
}


Line 17: start : program



ScopeTable # 1
 1 --> < main , ID > 


Total lines: 17
Total errors: 0
