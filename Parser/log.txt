Line 1: type_specifier : INT

int

Line 1: declaration_list : ID

x

Line 1: declaration_list : declaration_list COMMA ID

x,y

Line 1: declaration_list : declaration_list COMMA ID

x,y,z

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int x,y,z;


Line 1: unit : var_declaration

int x,y,z;


Line 1: program : unit

int x,y,z;


Line 3: type_specifier : VOID

void

Line 3: func_declaration : type_specifier ID LPAREN RPAREN SEMICOLON

void foo();


Line 3: unit : func_declaration

void foo();


Line 3: program : program unit

int x,y,z;
void foo();


Line 5: type_specifier : INT

int

Line 5: type_specifier : INT

int

Line 5: parameter_list : type_specifier ID

int a

Line 5: type_specifier : INT

int

Line 5: parameter_list : parameter_list COMMA type_specifier ID

int a,int b

Line 6: variable : ID

a

Line 6: factor : variable 

a

Line 6: unary_expression : factor

a

Line 6: term : unary_expression

a

Line 6: simple_expression : term 

a

Line 6: variable : ID

b

Line 6: factor : variable 

b

Line 6: unary_expression : factor

b

Line 6: term : unary_expression

b

Line 6: simple_expression : simple_expression ADDOP term 

a+b

Line 6: rel_expression : simple_expression

a+b

Line 6: logic_expression : rel_expression 

a+b

Line 6: expression : logic expression

a+b

Line 6: statement : RETURN expression SEMICOLON

return a+b;


Line 6: statements : statement

return a+b;


Line 7: compound_statement : LCURL statements RCURL

{
return a+b;
}


ScopeTable # 1.1
 7 --> < a , ID > 
 8 --> < b , ID > 

ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > 
 2 --> < z , ID > 
 24 --> < foo , ID > 
 29 --> < var , ID > 

Line 7: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int var(int a,int b){
return a+b;
}


Line 7: unit : func_definition

int var(int a,int b){
return a+b;
}


Line 7: program : program unit

int x,y,z;
void foo();
int var(int a,int b){
return a+b;
}


Line 8: type_specifier : VOID

void

Line 8: type_specifier : INT

int

Line 8: parameter_list : type_specifier ID

int a

Line 8: type_specifier : INT

int

Line 8: parameter_list : parameter_list COMMA type_specifier ID

int a,int b

Line 10: compound_statement : LCURL  RCURL

{
}


ScopeTable # 1.2
 7 --> < a , ID > 
 8 --> < b , ID > 

ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > 
 2 --> < z , ID > 
 18 --> < var1 , ID > 
 24 --> < foo , ID > 
 29 --> < var , ID > 

Line 10: func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

void var1(int a,int b){
}


Line 10: unit : func_definition

void var1(int a,int b){
}


Line 10: program : program unit

int x,y,z;
void foo();
int var(int a,int b){
return a+b;
}
void var1(int a,int b){
}


Line 11: type_specifier : VOID

void

Line 12: variable : ID

x

Line 12: factor : CONST_INT

2

Line 12: unary_expression : factor

2

Line 12: term : unary_expression

2

Line 12: simple_expression : term 

2

Line 12: rel_expression : simple_expression

2

Line 12: logic_expression : rel_expression 

2

Line 12: expression : variable ASSIGNOP logic_expression

x=2

Line 12: expression_statement : expression SEMICOLON

x=2;


Line 12: statement : expression_statement

x=2;


Line 12: statements : statement

x=2;


Line 13: variable : ID

y

Line 13: variable : ID

x

Line 13: factor : variable 

x

Line 13: unary_expression : factor

x

Line 13: term : unary_expression

x

Line 13: simple_expression : term 

x

Line 13: factor : CONST_INT

5

Line 13: unary_expression : factor

5

Line 13: term : unary_expression

5

Line 13: simple_expression : simple_expression ADDOP term 

x-5

Line 13: rel_expression : simple_expression

x-5

Line 13: logic_expression : rel_expression 

x-5

Line 13: expression : variable ASSIGNOP logic_expression

y=x-5

Line 13: expression_statement : expression SEMICOLON

y=x-5;


Line 13: statement : expression_statement

y=x-5;


Line 13: statements : statements statement

x=2;
y=x-5;


Line 14: compound_statement : LCURL statements RCURL

{
x=2;
y=x-5;
}


ScopeTable # 1.3

ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > 
 2 --> < z , ID > 
 18 --> < var1 , ID > 
 24 --> < foo , ID > 
 29 --> < var , ID > 

Line 14: func_definition : type_specifier ID LPAREN RPAREN compound_statement

void foo(){
x=2;
y=x-5;
}


Line 14: unit : func_definition

void foo(){
x=2;
y=x-5;
}


Line 14: program : program unit

int x,y,z;
void foo();
int var(int a,int b){
return a+b;
}
void var1(int a,int b){
}
void foo(){
x=2;
y=x-5;
}


Line 16: type_specifier : INT

int

Line 17: type_specifier : INT

int

Line 17: declaration_list : ID

c

Line 17: declaration_list : declaration_list COMMA ID

c,i

Line 17: declaration_list : declaration_list COMMA ID

c,i,j

Line 17: declaration_list : declaration_list COMMA ID

c,i,j,d

Line 17: declaration_list : declaration_list COMMA ID LTHIRD CONST_INT RTHIRD

c,i,j,d,e[4]

Line 17: var_declaration : type_specifier declaration_list SEMICOLON

int c,i,j,d,e[4];


Line 17: statement : var_declaration

int c,i,j,d,e[4];


Line 17: statements : statement

int c,i,j,d,e[4];


Line 18: variable : ID

c

Line 18: factor : CONST_INT

2

Line 18: unary_expression : factor

2

Line 18: term : unary_expression

2

Line 18: simple_expression : term 

2

Line 18: rel_expression : simple_expression

2

Line 18: logic_expression : rel_expression 

2

Line 18: expression : variable ASSIGNOP logic_expression

c=2

Line 18: expression_statement : expression SEMICOLON

c=2;


Line 18: statement : expression_statement

c=2;


Line 18: statements : statements statement

int c,i,j,d,e[4];
c=2;


Line 19: variable : ID

j

Line 19: factor : CONST_INT

2

Line 19: unary_expression : factor

2

Line 19: term : unary_expression

2

Line 19: factor : CONST_INT

3

Line 19: unary_expression : factor

3

Line 19: term : term MULOP unary_expression

2*3

Line 19: simple_expression : term 

2*3

Line 19: factor : CONST_INT

5

Line 19: unary_expression : factor

5

Line 19: term : unary_expression

5

Line 19: factor : CONST_INT

3

Line 19: unary_expression : factor

3

Line 19: term : term MULOP unary_expression

5%3

Line 19: simple_expression : term 

5%3

Line 19: rel_expression : simple_expression

5%3

Line 19: logic_expression : rel_expression 

5%3

Line 19: expression : logic expression

5%3

Line 19: factor : LPAREN expression RPAREN

(5%3)

Line 19: unary_expression : factor

(5%3)

Line 19: term : unary_expression

(5%3)

Line 19: simple_expression : simple_expression ADDOP term 

2*3+(5%3)

Line 19: factor : CONST_INT

2

Line 19: unary_expression : factor

2

Line 19: term : unary_expression

2

Line 19: simple_expression : simple_expression ADDOP term 

2*3+(5%3)+2

Line 19: rel_expression : simple_expression

2*3+(5%3)+2

Line 19: logic_expression : rel_expression 

2*3+(5%3)+2

Line 19: expression : variable ASSIGNOP logic_expression

j=2*3+(5%3)+2

Line 19: expression_statement : expression SEMICOLON

j=2*3+(5%3)+2;


Line 19: statement : expression_statement

j=2*3+(5%3)+2;


Line 19: statements : statements statement

int c,i,j,d,e[4];
c=2;
j=2*3+(5%3)+2;


Line 20: variable : ID

i

Line 20: variable : ID

c

Line 20: factor : variable 

c

Line 20: unary_expression : factor

c

Line 20: term : unary_expression

c

Line 20: simple_expression : term 

c

Line 20: factor : CONST_INT

2

Line 20: unary_expression : factor

2

Line 20: term : unary_expression

2

Line 20: simple_expression : simple_expression ADDOP term 

c+2

Line 20: rel_expression : simple_expression

c+2

Line 20: logic_expression : rel_expression 

c+2

Line 20: expression : variable ASSIGNOP logic_expression

i=c+2

Line 20: expression_statement : expression SEMICOLON

i=c+2;


Line 20: statement : expression_statement

i=c+2;


Line 20: statements : statements statement

int c,i,j,d,e[4];
c=2;
j=2*3+(5%3)+2;
i=c+2;


Line 21: variable : ID

d

Line 21: factor : CONST_INT

1

Line 21: unary_expression : factor

1

Line 21: term : unary_expression

1

Line 21: simple_expression : term 

1

Line 21: rel_expression : simple_expression

1

Line 21: logic_expression : rel_expression 

1

Line 21: arguments : logic_expression

1

Line 21: factor : CONST_INT

2

Line 21: unary_expression : factor

2

Line 21: term : unary_expression

2

Line 21: factor : CONST_INT

3

Line 21: unary_expression : factor

3

Line 21: term : term MULOP unary_expression

2*3

Line 21: simple_expression : term 

2*3

Line 21: rel_expression : simple_expression

2*3

Line 21: logic_expression : rel_expression 

2*3

Line 21: arguments : arguments COMMA logic_expression

1,2*3

Line 21: argument_list : arguments

1,2*3

Line 21: factor : ID LPAREN argument_list RPAREN

var(1,2*3)

Line 21: unary_expression : factor

var(1,2*3)

Line 21: term : unary_expression

var(1,2*3)

Line 21: simple_expression : term 

var(1,2*3)

Line 21: factor : CONST_INT

3

Line 21: unary_expression : factor

3

Line 21: term : unary_expression

3

Line 21: factor : CONST_INT

2

Line 21: unary_expression : factor

2

Line 21: term : term MULOP unary_expression

3*2

Line 21: simple_expression : simple_expression ADDOP term 

var(1,2*3)+3*2

Line 21: rel_expression : simple_expression

var(1,2*3)+3*2

Line 21: logic_expression : rel_expression 

var(1,2*3)+3*2

Line 21: expression : variable ASSIGNOP logic_expression

d=var(1,2*3)+3*2

Line 21: expression_statement : expression SEMICOLON

d=var(1,2*3)+3*2;


Line 21: statement : expression_statement

d=var(1,2*3)+3*2;


Line 21: statements : statements statement

int c,i,j,d,e[4];
c=2;
j=2*3+(5%3)+2;
i=c+2;
d=var(1,2*3)+3*2;


Line 22: factor : CONST_INT

0

Line 22: unary_expression : factor

0

Line 22: term : unary_expression

0

Line 22: simple_expression : term 

0

Line 22: rel_expression : simple_expression

0

Line 22: logic_expression : rel_expression 

0

Line 22: expression : logic expression

0

Line 22: statement : RETURN expression SEMICOLON

return 0;


Line 22: statements : statements statement

int c,i,j,d,e[4];
c=2;
j=2*3+(5%3)+2;
i=c+2;
d=var(1,2*3)+3*2;
return 0;


Line 23: compound_statement : LCURL statements RCURL

{
int c,i,j,d,e[4];
c=2;
j=2*3+(5%3)+2;
i=c+2;
d=var(1,2*3)+3*2;
return 0;
}


ScopeTable # 1.4
 9 --> < c , ID > 
 10 --> < d , ID > 
 11 --> < e , ID > 
 15 --> < i , ID > 
 16 --> < j , ID > 

ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > < main , ID > 
 2 --> < z , ID > 
 18 --> < var1 , ID > 
 24 --> < foo , ID > 
 29 --> < var , ID > 

Line 23: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int c,i,j,d,e[4];
c=2;
j=2*3+(5%3)+2;
i=c+2;
d=var(1,2*3)+3*2;
return 0;
}


Line 23: unit : func_definition

int main(){
int c,i,j,d,e[4];
c=2;
j=2*3+(5%3)+2;
i=c+2;
d=var(1,2*3)+3*2;
return 0;
}


Line 23: program : program unit

int x,y,z;
void foo();
int var(int a,int b){
return a+b;
}
void var1(int a,int b){
}
void foo(){
x=2;
y=x-5;
}
int main(){
int c,i,j,d,e[4];
c=2;
j=2*3+(5%3)+2;
i=c+2;
d=var(1,2*3)+3*2;
return 0;
}


Line 24: start : program



ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > < main , ID > 
 2 --> < z , ID > 
 18 --> < var1 , ID > 
 24 --> < foo , ID > 
 29 --> < var , ID > 


Total lines: 24
Total errors: 0
