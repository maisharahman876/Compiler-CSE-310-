At line no: 1 type_specifier : INT

int

At line no: 1 declaration_list : ID

x

At line no: 1 declaration_list : declaration_list COMMA ID

x,y

At line no: 1 declaration_list : declaration_list COMMA ID

x,y,z

At line no: 1 var_declaration : type_specifier declaration_list SEMICOLON

int x,y,z;


At line no: 1 unit : var_declaration

int x,y,z;


At line no: 1 program : unit

int x,y,z;


At line no: 2 type_specifier : FLOAT

float

At line no: 2 declaration_list : ID

ab

At line no: 2 var_declaration : type_specifier declaration_list SEMICOLON

float ab;


At line no: 2 unit : var_declaration

float ab;


At line no: 2 program : program unit

int x,y,z;
float ab;


At line no: 4 type_specifier : VOID

void

At line no: 4 func_declaration : type_specifier ID LPAREN RPAREN SEMICOLON

void foo();


At line no: 4 unit : func_declaration

void foo();


At line no: 4 program : program unit

int x,y,z;
float ab;
void foo();


At line no: 5 type_specifier : INT

int

At line no: 5 type_specifier : INT

int

At line no: 5 parameter_list  : type_specifier ID

int a

At line no: 5 type_specifier : INT

int

At line no: 5 parameter_list  : parameter_list COMMA type_specifier ID

int a,int b

At line no: 5 func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON

int var(int a,int b);


At line no: 5 unit : func_declaration

int var(int a,int b);


At line no: 5 program : program unit

int x,y,z;
float ab;
void foo();
int var(int a,int b);


At line no: 7 type_specifier : INT

int

At line no: 7 type_specifier : INT

int

At line no: 7 parameter_list  : type_specifier ID

int a

At line no: 7 type_specifier : INT

int

At line no: 7 parameter_list  : parameter_list COMMA type_specifier ID

int a,int b

At line no: 8 variable : ID

a

At line no: 8 variable : ID

a

At line no: 8 factor : variable 

a

At line no: 8 unary_expression : factor

a

At line no: 8 term : unary_expression

a

At line no: 8 simple_expression : term 

a

At line no: 8 variable : ID

y

At line no: 8 factor : variable 

y

At line no: 8 unary_expression : factor

y

At line no: 8 term : unary_expression

y

At line no: 8 factor : CONST_INT

2

At line no: 8 unary_expression : factor

2

At line no: 8 term : term MULOP unary_expression

y*2

At line no: 8 simple_expression : simple_expression ADDOP term 

a+y*2

At line no: 8 rel_expression : simple_expression

a+y*2

At line no: 8 logic_expression : rel_expression 

a+y*2

At line no: 8 expression : variable ASSIGNOP logic_expression

a=a+y*2

At line no: 8 expression_statement : expression SEMICOLON

a=a+y*2;


At line no: 8 statement : expression_statement

a=a+y*2;


At line no: 8 statements : statement

a=a+y*2;


At line no: 9 variable : ID

a

At line no: 9 factor : variable 

a

At line no: 9 unary_expression : factor

a

At line no: 9 term : unary_expression

a

At line no: 9 simple_expression : term 

a

At line no: 9 variable : ID

b

At line no: 9 factor : variable 

b

At line no: 9 unary_expression : factor

b

At line no: 9 term : unary_expression

b

At line no: 9 simple_expression : simple_expression ADDOP term 

a+b

At line no: 9 rel_expression : simple_expression

a+b

At line no: 9 logic_expression : rel_expression 

a+b

At line no: 9 expression : logic_expression

a+b

At line no: 9 statement : RETURN expression SEMICOLON

return a+b;


At line no: 9 statements : statements statement

a=a+y*2;
return a+b;


At line no: 10 compound_statement : LCURL statements RCURL

{
a=a+y*2;
return a+b;
}


ScopeTable # 1.1
 4 --> < a : ID > 
 5 --> < b : ID > 

ScopeTable # 1
 9 --> < ab : ID > 
 14 --> < foo : ID > 
 19 --> < var : ID > 
 27 --> < x : ID > 
 28 --> < y : ID > 
 29 --> < z : ID > 

ScopeTable with id 1.1 removed

At line no: 10 func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement

int var(int a,int b){
a=a+y*2;
return a+b;
}


At line no: 10 unit : func_definition

int var(int a,int b){
a=a+y*2;
return a+b;
}


At line no: 10 program : program unit

int x,y,z;
float ab;
void foo();
int var(int a,int b);
int var(int a,int b){
a=a+y*2;
return a+b;
}


At line no: 12 type_specifier : VOID

void

At line no: 13 variable : ID

x

At line no: 13 factor : CONST_INT

2

At line no: 13 unary_expression : factor

2

At line no: 13 term : unary_expression

2

At line no: 13 simple_expression : term 

2

At line no: 13 rel_expression : simple_expression

2

At line no: 13 logic_expression : rel_expression 

2

At line no: 13 expression : variable ASSIGNOP logic_expression

x=2

At line no: 13 expression_statement : expression SEMICOLON

x=2;


At line no: 13 statement : expression_statement

x=2;


At line no: 13 statements : statement

x=2;


At line no: 14 variable : ID

y

At line no: 14 variable : ID

x

At line no: 14 factor : variable 

x

At line no: 14 unary_expression : factor

x

At line no: 14 term : unary_expression

x

At line no: 14 simple_expression : term 

x

At line no: 14 factor : CONST_INT

5

At line no: 14 unary_expression : factor

5

At line no: 14 term : unary_expression

5

At line no: 14 simple_expression : simple_expression ADDOP term 

x-5

At line no: 14 rel_expression : simple_expression

x-5

At line no: 14 logic_expression : rel_expression 

x-5

At line no: 14 expression : variable ASSIGNOP logic_expression

y=x-5

At line no: 14 expression_statement : expression SEMICOLON

y=x-5;


At line no: 14 statement : expression_statement

y=x-5;


At line no: 14 statements : statements statement

x=2;
y=x-5;


At line no: 15 compound_statement : LCURL statements RCURL

{
x=2;
y=x-5;
}


ScopeTable # 1.2

ScopeTable # 1
 9 --> < ab : ID > 
 14 --> < foo : ID > 
 19 --> < var : ID > 
 27 --> < x : ID > 
 28 --> < y : ID > 
 29 --> < z : ID > 

ScopeTable with id 1.2 removed

At line no: 15 func_definition : type_specifier ID LPAREN RPAREN compound_statement

void foo(){
x=2;
y=x-5;
}


At line no: 15 unit : func_definition

void foo(){
x=2;
y=x-5;
}


At line no: 15 program : program unit

int x,y,z;
float ab;
void foo();
int var(int a,int b);
int var(int a,int b){
a=a+y*2;
return a+b;
}
void foo(){
x=2;
y=x-5;
}


At line no: 17 type_specifier : INT

int

At line no: 18 type_specifier : INT

int

At line no: 18 declaration_list : ID

c

At line no: 18 declaration_list : declaration_list COMMA ID

c,i

At line no: 18 declaration_list : declaration_list COMMA ID LTHIRD CONST_INT RTHIRD

c,i,a[2]

At line no: 18 declaration_list : declaration_list COMMA ID

c,i,a[2],j

At line no: 18 var_declaration : type_specifier declaration_list SEMICOLON

int c,i,a[2],j;


At line no: 18 statement : var_declaration

int c,i,a[2],j;


At line no: 18 statements : statement

int c,i,a[2],j;


At line no: 18 type_specifier : FLOAT

float

At line no: 18 declaration_list : ID

d

At line no: 18 var_declaration : type_specifier declaration_list SEMICOLON

float d;


At line no: 18 statement : var_declaration

float d;


At line no: 18 statements : statements statement

int c,i,a[2],j;
float d;


At line no: 19 variable : ID

c

At line no: 19 factor : CONST_INT

4

At line no: 19 unary_expression : factor

4

At line no: 19 term : unary_expression

4

At line no: 19 simple_expression : term 

4

At line no: 19 rel_expression : simple_expression

4

At line no: 19 logic_expression : rel_expression 

4

At line no: 19 expression : variable ASSIGNOP logic_expression

c=4

At line no: 19 expression_statement : expression SEMICOLON

c=4;


At line no: 19 statement : expression_statement

c=4;


At line no: 19 statements : statements statement

int c,i,a[2],j;
float d;
c=4;


At line no: 20 variable : ID

d

At line no: 20 factor : CONST_FLOAT 

9.5

At line no: 20 unary_expression : factor

9.5

At line no: 20 term : unary_expression

9.5

At line no: 20 simple_expression : term 

9.5

At line no: 20 rel_expression : simple_expression

9.5

At line no: 20 logic_expression : rel_expression 

9.5

At line no: 20 expression : variable ASSIGNOP logic_expression

d=9.5

At line no: 20 expression_statement : expression SEMICOLON

d=9.5;


At line no: 20 statement : expression_statement

d=9.5;


At line no: 20 statements : statements statement

int c,i,a[2],j;
float d;
c=4;
d=9.5;


At line no: 21 variable : ID

j

At line no: 21 factor : CONST_INT

9

At line no: 21 unary_expression : factor

9

At line no: 21 term : unary_expression

9

At line no: 21 simple_expression : term 

9

At line no: 21 rel_expression : simple_expression

9

At line no: 21 logic_expression : rel_expression 

9

At line no: 21 expression : variable ASSIGNOP logic_expression

j=9

At line no: 21 expression_statement : expression SEMICOLON

j=9;


At line no: 21 statement : expression_statement

j=9;


At line no: 21 statements : statements statement

int c,i,a[2],j;
float d;
c=4;
d=9.5;
j=9;


At line no: 24 factor : CONST_INT

0

At line no: 24 unary_expression : factor

0

At line no: 24 term : unary_expression

0

At line no: 24 simple_expression : term 

0

At line no: 24 rel_expression : simple_expression

0

At line no: 24 logic_expression : rel_expression 

0

At line no: 24 expression : logic_expression

0

At line no: 24 variable : ID LTHIRD expression RTHIRD 

a[0]

At line no: 24 factor : CONST_INT

1

At line no: 24 unary_expression : factor

1

At line no: 24 term : unary_expression

1

At line no: 24 simple_expression : term 

1

At line no: 24 rel_expression : simple_expression

1

At line no: 24 logic_expression : rel_expression 

1

At line no: 24 expression : variable ASSIGNOP logic_expression

a[0]=1

At line no: 24 expression_statement : expression SEMICOLON

a[0]=1;


At line no: 24 statement : expression_statement

a[0]=1;


At line no: 24 statements : statement

a[0]=1;


At line no: 25 factor : CONST_INT

1

At line no: 25 unary_expression : factor

1

At line no: 25 term : unary_expression

1

At line no: 25 simple_expression : term 

1

At line no: 25 rel_expression : simple_expression

1

At line no: 25 logic_expression : rel_expression 

1

At line no: 25 expression : logic_expression

1

At line no: 25 variable : ID LTHIRD expression RTHIRD 

a[1]

At line no: 25 variable : ID

c

At line no: 25 factor : variable 

c

At line no: 25 unary_expression : factor

c

At line no: 25 term : unary_expression

c

At line no: 25 simple_expression : term 

c

At line no: 25 rel_expression : simple_expression

c

At line no: 25 logic_expression : rel_expression 

c

At line no: 25 arguments : logic_expression

c

At line no: 25 variable : ID

j

At line no: 25 factor : variable 

j

At line no: 25 unary_expression : factor

j

At line no: 25 term : unary_expression

j

At line no: 25 simple_expression : term 

j

At line no: 25 rel_expression : simple_expression

j

At line no: 25 logic_expression : rel_expression 

j

At line no: 25 arguments : arguments COMMA logic_expression

c,j

At line no: 25 argument_list : arguments

c,j

At line no: 25 factor : ID LPAREN argument_list RPAREN

var(c,j)

At line no: 25 unary_expression : factor

var(c,j)

At line no: 25 term : unary_expression

var(c,j)

At line no: 25 simple_expression : term 

var(c,j)

At line no: 25 rel_expression : simple_expression

var(c,j)

At line no: 25 logic_expression : rel_expression 

var(c,j)

At line no: 25 expression : variable ASSIGNOP logic_expression

a[1]=var(c,j)

At line no: 25 expression_statement : expression SEMICOLON

a[1]=var(c,j);


At line no: 25 statement : expression_statement

a[1]=var(c,j);


At line no: 25 statements : statements statement

a[0]=1;
a[1]=var(c,j);


At line no: 26 compound_statement : LCURL statements RCURL

{
a[0]=1;
a[1]=var(c,j);
}


ScopeTable # 1.3.1

ScopeTable # 1.3
 4 --> < a : ID > 
 6 --> < c : ID > 
 7 --> < d : ID > 
 12 --> < i : ID > 
 13 --> < j : ID > 

ScopeTable # 1
 9 --> < ab : ID > 
 14 --> < foo : ID > 
 18 --> < main : ID > 
 19 --> < var : ID > 
 27 --> < x : ID > 
 28 --> < y : ID > 
 29 --> < z : ID > 

ScopeTable with id 1.3.1 removed

At line no: 26 statement : compound_statement

{
a[0]=1;
a[1]=var(c,j);
}


At line no: 26 statements : statements statement

int c,i,a[2],j;
float d;
c=4;
d=9.5;
j=9;
{
a[0]=1;
a[1]=var(c,j);
}


At line no: 27 variable : ID

i

At line no: 27 factor : CONST_INT

0

At line no: 27 unary_expression : factor

0

At line no: 27 term : unary_expression

0

At line no: 27 simple_expression : term 

0

At line no: 27 rel_expression : simple_expression

0

At line no: 27 logic_expression : rel_expression 

0

At line no: 27 expression : logic_expression

0

At line no: 27 variable : ID LTHIRD expression RTHIRD 

a[0]

At line no: 27 factor : variable 

a[0]

At line no: 27 unary_expression : factor

a[0]

At line no: 27 term : unary_expression

a[0]

At line no: 27 simple_expression : term 

a[0]

At line no: 27 factor : CONST_INT

1

At line no: 27 unary_expression : factor

1

At line no: 27 term : unary_expression

1

At line no: 27 simple_expression : term 

1

At line no: 27 rel_expression : simple_expression

1

At line no: 27 logic_expression : rel_expression 

1

At line no: 27 expression : logic_expression

1

At line no: 27 variable : ID LTHIRD expression RTHIRD 

a[1]

At line no: 27 factor : variable 

a[1]

At line no: 27 unary_expression : factor

a[1]

At line no: 27 term : unary_expression

a[1]

At line no: 27 simple_expression : simple_expression ADDOP term 

a[0]+a[1]

At line no: 27 rel_expression : simple_expression

a[0]+a[1]

At line no: 27 logic_expression : rel_expression 

a[0]+a[1]

At line no: 27 expression : variable ASSIGNOP logic_expression

i=a[0]+a[1]

At line no: 27 expression_statement : expression SEMICOLON

i=a[0]+a[1];


At line no: 27 statement : expression_statement

i=a[0]+a[1];


At line no: 27 statements : statements statement

int c,i,a[2],j;
float d;
c=4;
d=9.5;
j=9;
{
a[0]=1;
a[1]=var(c,j);
}
i=a[0]+a[1];


At line no: 29 variable : ID

c

At line no: 29 factor : variable 

c

At line no: 29 unary_expression : factor

c

At line no: 29 term : unary_expression

c

At line no: 29 simple_expression : term 

c

At line no: 29 factor : CONST_INT

0

At line no: 29 unary_expression : factor

0

At line no: 29 term : unary_expression

0

At line no: 29 simple_expression : term 

0

At line no: 29 rel_expression : simple_expression

0

At line no: 29 logic_expression : rel_expression 

0

At line no: 29 expression : logic_expression

0

At line no: 29 variable : ID LTHIRD expression RTHIRD 

a[0]

At line no: 29 factor : variable 

a[0]

At line no: 29 unary_expression : factor

a[0]

At line no: 29 term : unary_expression

a[0]

At line no: 29 simple_expression : term 

a[0]

At line no: 29 rel_expression : simple_expression RELOP simple_expression

c<a[0]

At line no: 29 logic_expression : rel_expression 

c<a[0]

At line no: 29 expression : logic_expression

c<a[0]

At line no: 30 variable : ID

c

At line no: 30 factor : CONST_INT

7

At line no: 30 unary_expression : factor

7

At line no: 30 term : unary_expression

7

At line no: 30 simple_expression : term 

7

At line no: 30 rel_expression : simple_expression

7

At line no: 30 logic_expression : rel_expression 

7

At line no: 30 expression : variable ASSIGNOP logic_expression

c=7

At line no: 30 expression_statement : expression SEMICOLON

c=7;


At line no: 30 statement : expression_statement

c=7;


At line no: 30 statements : statement

c=7;


At line no: 31 compound_statement : LCURL statements RCURL

{
c=7;
}


ScopeTable # 1.3.2

ScopeTable # 1.3
 4 --> < a : ID > 
 6 --> < c : ID > 
 7 --> < d : ID > 
 12 --> < i : ID > 
 13 --> < j : ID > 

ScopeTable # 1
 9 --> < ab : ID > 
 14 --> < foo : ID > 
 18 --> < main : ID > 
 19 --> < var : ID > 
 27 --> < x : ID > 
 28 --> < y : ID > 
 29 --> < z : ID > 

ScopeTable with id 1.3.2 removed

At line no: 31 statement : compound_statement

{
c=7;
}


At line no: 34 statement : IF LPAREN expression RPAREN statement

if(c<a[0]){
c=7;
}


At line no: 34 statements : statements statement

int c,i,a[2],j;
float d;
c=4;
d=9.5;
j=9;
{
a[0]=1;
a[1]=var(c,j);
}
i=a[0]+a[1];
if(c<a[0]){
c=7;
}


At line no: 34 variable : ID

c

At line no: 34 factor : variable 

c

At line no: 34 unary_expression : factor

c

At line no: 34 term : unary_expression

c

At line no: 34 simple_expression : term 

c

At line no: 34 variable : ID

d

At line no: 34 factor : variable 

d

At line no: 34 unary_expression : factor

d

At line no: 34 term : unary_expression

d

At line no: 34 simple_expression : term 

d

At line no: 34 rel_expression : simple_expression RELOP simple_expression

Error at line no 34: RELOP doesn't have same type at the both side

c<d

At line no: 34 logic_expression : rel_expression 

c<d

At line no: 34 expression : logic_expression

c<d

At line no: 35 factor : CONST_INT

1

At line no: 35 unary_expression : factor

1

At line no: 35 term : unary_expression

1

At line no: 35 simple_expression : term 

1

At line no: 35 rel_expression : simple_expression

1

At line no: 35 logic_expression : rel_expression 

1

At line no: 35 expression : logic_expression

1

At line no: 35 variable : ID LTHIRD expression RTHIRD 

a[1]

At line no: 35 factor : CONST_INT

1

At line no: 35 unary_expression : factor

1

At line no: 35 term : unary_expression

1

At line no: 35 simple_expression : term 

1

At line no: 35 rel_expression : simple_expression

1

At line no: 35 logic_expression : rel_expression 

1

At line no: 35 expression : logic_expression

1

At line no: 35 variable : ID LTHIRD expression RTHIRD 

a[1]

At line no: 35 factor : variable 

a[1]

At line no: 35 unary_expression : factor

a[1]

At line no: 35 unary_expression : ADDOP unary_expression

-a[1]

At line no: 35 term : unary_expression

-a[1]

At line no: 35 simple_expression : term 

-a[1]

At line no: 35 rel_expression : simple_expression

-a[1]

At line no: 35 logic_expression : rel_expression 

-a[1]

At line no: 35 expression : variable ASSIGNOP logic_expression

a[1]=-a[1]

At line no: 35 expression_statement : expression SEMICOLON

a[1]=-a[1];


At line no: 35 statement : expression_statement

a[1]=-a[1];


At line no: 35 statements : statement

a[1]=-a[1];


At line no: 35 expression_statement : SEMICOLON

;


At line no: 35 statement : expression_statement

;


At line no: 35 statements : statements statement

a[1]=-a[1];
;


At line no: 36 compound_statement : LCURL statements RCURL

{
a[1]=-a[1];
;
}


ScopeTable # 1.3.3

ScopeTable # 1.3
 4 --> < a : ID > 
 6 --> < c : ID > 
 7 --> < d : ID > 
 12 --> < i : ID > 
 13 --> < j : ID > 

ScopeTable # 1
 9 --> < ab : ID > 
 14 --> < foo : ID > 
 18 --> < main : ID > 
 19 --> < var : ID > 
 27 --> < x : ID > 
 28 --> < y : ID > 
 29 --> < z : ID > 

ScopeTable with id 1.3.3 removed

At line no: 36 statement : compound_statement

{
a[1]=-a[1];
;
}


At line no: 37 variable : ID

c

At line no: 37 factor : variable 

c

At line no: 37 unary_expression : factor

c

At line no: 37 term : unary_expression

c

At line no: 37 simple_expression : term 

c

At line no: 37 factor : CONST_INT

2

At line no: 37 unary_expression : factor

2

At line no: 37 term : unary_expression

2

At line no: 37 variable : ID

d

At line no: 37 factor : variable 

d

At line no: 37 unary_expression : factor

d

At line no: 37 term : term MULOP unary_expression

2*d

At line no: 37 simple_expression : term 

2*d

At line no: 37 rel_expression : simple_expression RELOP simple_expression

Error at line no 37: RELOP doesn't have same type at the both side

c<2*d

At line no: 37 logic_expression : rel_expression 

c<2*d

At line no: 37 expression : logic_expression

c<2*d

At line no: 38 factor : CONST_INT

0

At line no: 38 unary_expression : factor

0

At line no: 38 term : unary_expression

0

At line no: 38 simple_expression : term 

0

At line no: 38 rel_expression : simple_expression

0

At line no: 38 logic_expression : rel_expression 

0

At line no: 38 expression : logic_expression

0

At line no: 38 variable : ID LTHIRD expression RTHIRD 

a[0]

At line no: 38 factor : CONST_INT

7

At line no: 38 unary_expression : factor

7

At line no: 38 term : unary_expression

7

At line no: 38 simple_expression : term 

7

At line no: 38 factor : CONST_INT

5

At line no: 38 unary_expression : factor

5

At line no: 38 term : unary_expression

5

At line no: 38 simple_expression : term 

5

At line no: 38 rel_expression : simple_expression RELOP simple_expression

7<5

At line no: 38 logic_expression : rel_expression 

7<5

At line no: 38 expression : logic_expression

7<5

At line no: 38 factor : LPAREN expression RPAREN

(7<5)

At line no: 38 unary_expression : factor

(7<5)

At line no: 38 unary_expression : NOT unary_expression

!(7<5)

At line no: 38 term : unary_expression

!(7<5)

At line no: 38 simple_expression : term 

!(7<5)

At line no: 38 rel_expression : simple_expression

!(7<5)

At line no: 38 logic_expression : rel_expression 

!(7<5)

At line no: 38 expression : variable ASSIGNOP logic_expression

a[0]=!(7<5)

At line no: 38 expression_statement : expression SEMICOLON

a[0]=!(7<5);


At line no: 38 statement : expression_statement

a[0]=!(7<5);


At line no: 38 statements : statement

a[0]=!(7<5);


At line no: 39 compound_statement : LCURL statements RCURL

{
a[0]=!(7<5);
}


ScopeTable # 1.3.4

ScopeTable # 1.3
 4 --> < a : ID > 
 6 --> < c : ID > 
 7 --> < d : ID > 
 12 --> < i : ID > 
 13 --> < j : ID > 

ScopeTable # 1
 9 --> < ab : ID > 
 14 --> < foo : ID > 
 18 --> < main : ID > 
 19 --> < var : ID > 
 27 --> < x : ID > 
 28 --> < y : ID > 
 29 --> < z : ID > 

ScopeTable with id 1.3.4 removed

At line no: 39 statement : compound_statement

{
a[0]=!(7<5);
}


At line no: 41 variable : ID

d

At line no: 41 factor : CONST_INT

2

At line no: 41 unary_expression : factor

2

At line no: 41 term : unary_expression

2

At line no: 41 simple_expression : term 

2

At line no: 41 rel_expression : simple_expression

2

At line no: 41 logic_expression : rel_expression 

2

At line no: 41 expression : variable ASSIGNOP logic_expression

d=2

At line no: 41 expression_statement : expression SEMICOLON

d=2;


At line no: 41 statement : expression_statement

d=2;


At line no: 41 statements : statement

d=2;


At line no: 42 compound_statement : LCURL statements RCURL

{
d=2;
}


ScopeTable # 1.3.5

ScopeTable # 1.3
 4 --> < a : ID > 
 6 --> < c : ID > 
 7 --> < d : ID > 
 12 --> < i : ID > 
 13 --> < j : ID > 

ScopeTable # 1
 9 --> < ab : ID > 
 14 --> < foo : ID > 
 18 --> < main : ID > 
 19 --> < var : ID > 
 27 --> < x : ID > 
 28 --> < y : ID > 
 29 --> < z : ID > 

ScopeTable with id 1.3.5 removed

At line no: 42 statement : compound_statement

{
d=2;
}


At line no: 42 statement : IF LPAREN expression RPAREN statement ELSE statement

if(c<2*d){
a[0]=!(7<5);
}
else{
d=2;
}


At line no: 42 statement : IF LPAREN expression RPAREN statement ELSE statement

if(c<d){
a[1]=-a[1];
;
}
elseif(c<2*d){
a[0]=!(7<5);
}
else{
d=2;
}


At line no: 42 statements : statements statement

int c,i,a[2],j;
float d;
c=4;
d=9.5;
j=9;
{
a[0]=1;
a[1]=var(c,j);
}
i=a[0]+a[1];
if(c<a[0]){
c=7;
}
if(c<d){
a[1]=-a[1];
;
}
elseif(c<2*d){
a[0]=!(7<5);
}
else{
d=2;
}


At line no: 44 variable : ID

c

At line no: 44 factor : CONST_INT

0

At line no: 44 unary_expression : factor

0

At line no: 44 term : unary_expression

0

At line no: 44 simple_expression : term 

0

At line no: 44 rel_expression : simple_expression

0

At line no: 44 logic_expression : rel_expression 

0

At line no: 44 expression : variable ASSIGNOP logic_expression

c=0

At line no: 44 expression_statement : expression SEMICOLON

c=0;


At line no: 44 variable : ID

c

At line no: 44 factor : variable 

c

At line no: 44 unary_expression : factor

c

At line no: 44 term : unary_expression

c

At line no: 44 simple_expression : term 

c

At line no: 44 factor : CONST_INT

2

At line no: 44 unary_expression : factor

2

At line no: 44 term : unary_expression

2

At line no: 44 variable : ID

d

At line no: 44 factor : variable 

d

At line no: 44 unary_expression : factor

d

At line no: 44 term : term MULOP unary_expression

2*d

At line no: 44 simple_expression : term 

2*d

At line no: 44 factor : CONST_INT

3

At line no: 44 unary_expression : factor

3

At line no: 44 term : unary_expression

3

At line no: 44 simple_expression : simple_expression ADDOP term 

2*d+3

At line no: 44 rel_expression : simple_expression RELOP simple_expression

Error at line no 44: RELOP doesn't have same type at the both side

c<2*d+3

At line no: 44 logic_expression : rel_expression 

c<2*d+3

At line no: 44 expression : logic_expression

c<2*d+3

At line no: 44 expression_statement : expression SEMICOLON

c<2*d+3;


At line no: 44 variable : ID

c

At line no : 44 factor : variable INCOP

c++

At line no: 44 unary_expression : factor

c++

At line no: 44 term : unary_expression

c++

At line no: 44 simple_expression : term 

c++

At line no: 44 rel_expression : simple_expression

c++

At line no: 44 logic_expression : rel_expression 

c++

At line no: 44 expression : logic_expression

c++

At line no: 45 factor : CONST_INT

0

At line no: 45 unary_expression : factor

0

At line no: 45 term : unary_expression

0

At line no: 45 simple_expression : term 

0

At line no: 45 rel_expression : simple_expression

0

At line no: 45 logic_expression : rel_expression 

0

At line no: 45 expression : logic_expression

0

At line no: 45 variable : ID LTHIRD expression RTHIRD 

a[0]

At line no: 45 factor : CONST_INT

0

At line no: 45 unary_expression : factor

0

At line no: 45 term : unary_expression

0

At line no: 45 simple_expression : term 

0

At line no: 45 rel_expression : simple_expression

0

At line no: 45 logic_expression : rel_expression 

0

At line no: 45 expression : logic_expression

0

At line no: 45 variable : ID LTHIRD expression RTHIRD 

a[0]

At line no: 45 factor : variable 

a[0]

At line no: 45 unary_expression : factor

a[0]

At line no: 45 term : unary_expression

a[0]

At line no: 45 factor : CONST_INT

4

At line no: 45 unary_expression : factor

4

At line no: 45 term : term MULOP unary_expression

a[0]*4

At line no: 45 simple_expression : term 

a[0]*4

At line no: 45 rel_expression : simple_expression

a[0]*4

At line no: 45 logic_expression : rel_expression 

a[0]*4

At line no: 45 expression : variable ASSIGNOP logic_expression

a[0]=a[0]*4

At line no: 45 expression_statement : expression SEMICOLON

a[0]=a[0]*4;


At line no: 45 statement : expression_statement

a[0]=a[0]*4;


At line no: 45 statements : statement

a[0]=a[0]*4;


At line no: 46 compound_statement : LCURL statements RCURL

{
a[0]=a[0]*4;
}


ScopeTable # 1.3.6

ScopeTable # 1.3
 4 --> < a : ID > 
 6 --> < c : ID > 
 7 --> < d : ID > 
 12 --> < i : ID > 
 13 --> < j : ID > 

ScopeTable # 1
 9 --> < ab : ID > 
 14 --> < foo : ID > 
 18 --> < main : ID > 
 19 --> < var : ID > 
 27 --> < x : ID > 
 28 --> < y : ID > 
 29 --> < z : ID > 

ScopeTable with id 1.3.6 removed

At line no: 46 statement : compound_statement

{
a[0]=a[0]*4;
}


At line no: 46 statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement

for(c=0;
c<2*d+3;
c++){
a[0]=a[0]*4;
}


At line no: 46 statements : statements statement

int c,i,a[2],j;
float d;
c=4;
d=9.5;
j=9;
{
a[0]=1;
a[1]=var(c,j);
}
i=a[0]+a[1];
if(c<a[0]){
c=7;
}
if(c<d){
a[1]=-a[1];
;
}
elseif(c<2*d){
a[0]=!(7<5);
}
else{
d=2;
}
for(c=0;
c<2*d+3;
c++){
a[0]=a[0]*4;
}


At line no: 48 factor : CONST_INT

0

At line no: 48 unary_expression : factor

0

At line no: 48 term : unary_expression

0

At line no: 48 simple_expression : term 

0

At line no: 48 rel_expression : simple_expression

0

At line no: 48 logic_expression : rel_expression 

0

At line no: 48 expression : logic_expression

0

At line no: 48 variable : ID LTHIRD expression RTHIRD 

a[0]

At line no: 48 factor : variable DECOP

a[0]--

At line no: 48 unary_expression : factor

a[0]--

At line no: 48 term : unary_expression

a[0]--

At line no: 48 simple_expression : term 

a[0]--

At line no: 48 rel_expression : simple_expression

a[0]--

At line no: 48 logic_expression : rel_expression 

a[0]--

At line no: 48 expression : logic_expression

a[0]--

At line no: 49 variable : ID

c

At line no: 49 variable : ID

c

At line no: 49 factor : variable 

c

At line no: 49 unary_expression : factor

c

At line no: 49 term : unary_expression

c

At line no: 49 simple_expression : term 

c

At line no: 49 factor : CONST_INT

2

At line no: 49 unary_expression : factor

2

At line no: 49 term : unary_expression

2

At line no: 49 simple_expression : simple_expression ADDOP term 

c-2

At line no: 49 rel_expression : simple_expression

c-2

At line no: 49 logic_expression : rel_expression 

c-2

At line no: 49 expression : variable ASSIGNOP logic_expression

c=c-2

At line no: 49 expression_statement : expression SEMICOLON

c=c-2;


At line no: 49 statement : expression_statement

c=c-2;


At line no: 49 statements : statement

c=c-2;


At line no: 50 compound_statement : LCURL statements RCURL

{
c=c-2;
}


ScopeTable # 1.3.7

ScopeTable # 1.3
 4 --> < a : ID > 
 6 --> < c : ID > 
 7 --> < d : ID > 
 12 --> < i : ID > 
 13 --> < j : ID > 

ScopeTable # 1
 9 --> < ab : ID > 
 14 --> < foo : ID > 
 18 --> < main : ID > 
 19 --> < var : ID > 
 27 --> < x : ID > 
 28 --> < y : ID > 
 29 --> < z : ID > 

ScopeTable with id 1.3.7 removed

At line no: 50 statement : compound_statement

{
c=c-2;
}


At line no: 50 statement : WHILE LPAREN expression RPAREN statement

while(a[0]--){
c=c-2;
}


At line no: 50 statements : statements statement

int c,i,a[2],j;
float d;
c=4;
d=9.5;
j=9;
{
a[0]=1;
a[1]=var(c,j);
}
i=a[0]+a[1];
if(c<a[0]){
c=7;
}
if(c<d){
a[1]=-a[1];
;
}
elseif(c<2*d){
a[0]=!(7<5);
}
else{
d=2;
}
for(c=0;
c<2*d+3;
c++){
a[0]=a[0]*4;
}
while(a[0]--){
c=c-2;
}


At line no: 52 statement : PRINTLN LPAREN ID RPAREN SEMICOLON

print(c);


At line no: 52 statements : statements statement

int c,i,a[2],j;
float d;
c=4;
d=9.5;
j=9;
{
a[0]=1;
a[1]=var(c,j);
}
i=a[0]+a[1];
if(c<a[0]){
c=7;
}
if(c<d){
a[1]=-a[1];
;
}
elseif(c<2*d){
a[0]=!(7<5);
}
else{
d=2;
}
for(c=0;
c<2*d+3;
c++){
a[0]=a[0]*4;
}
while(a[0]--){
c=c-2;
}
print(c);


At line no: 56 variable : ID

j

At line no: 56 factor : CONST_INT

2

At line no: 56 unary_expression : factor

2

At line no: 56 term : unary_expression

2

At line no: 56 factor : CONST_INT

3

At line no: 56 unary_expression : factor

3

At line no: 56 term : term MULOP unary_expression

2*3

At line no: 56 simple_expression : term 

2*3

At line no: 56 factor : CONST_INT

5

At line no: 56 unary_expression : factor

5

At line no: 56 term : unary_expression

5

At line no: 56 factor : CONST_INT

3

At line no: 56 unary_expression : factor

3

At line no: 56 term : term MULOP unary_expression

5%3

At line no: 56 simple_expression : term 

5%3

At line no: 56 factor : CONST_INT

4

At line no: 56 unary_expression : factor

4

At line no: 56 term : unary_expression

4

At line no: 56 simple_expression : term 

4

At line no: 56 rel_expression : simple_expression RELOP simple_expression

5%3<4

At line no: 56 factor : CONST_INT

8

At line no: 56 unary_expression : factor

8

At line no: 56 term : unary_expression

8

At line no: 56 simple_expression : term 

8

At line no: 56 rel_expression : simple_expression

8

At line no: 56 logic_expression : rel_expression 

5%3<4&&8

At line no: 56 expression : logic_expression

5%3<4&&8

At line no: 56 factor : LPAREN expression RPAREN

(5%3<4&&8)

At line no: 56 unary_expression : factor

(5%3<4&&8)

At line no: 56 term : unary_expression

(5%3<4&&8)

At line no: 56 simple_expression : simple_expression ADDOP term 

2*3+(5%3<4&&8)

At line no: 56 rel_expression : simple_expression

2*3+(5%3<4&&8)

At line no: 56 factor : CONST_INT

2

At line no: 56 unary_expression : factor

2

At line no: 56 term : unary_expression

2

At line no: 56 simple_expression : term 

2

At line no: 56 rel_expression : simple_expression

2

At line no: 56 logic_expression : rel_expression 

2*3+(5%3<4&&8)||2

At line no: 56 expression : variable ASSIGNOP logic_expression

j=2*3+(5%3<4&&8)||2

At line no: 56 expression_statement : expression SEMICOLON

j=2*3+(5%3<4&&8)||2;


At line no: 56 statement : expression_statement

j=2*3+(5%3<4&&8)||2;


At line no: 56 statements : statements statement

int c,i,a[2],j;
float d;
c=4;
d=9.5;
j=9;
{
a[0]=1;
a[1]=var(c,j);
}
i=a[0]+a[1];
if(c<a[0]){
c=7;
}
if(c<d){
a[1]=-a[1];
;
}
elseif(c<2*d){
a[0]=!(7<5);
}
else{
d=2;
}
for(c=0;
c<2*d+3;
c++){
a[0]=a[0]*4;
}
while(a[0]--){
c=c-2;
}
print(c);
j=2*3+(5%3<4&&8)||2;


At line no: 57 variable : ID

d

At line no: 57 factor : CONST_INT

1

At line no: 57 unary_expression : factor

1

At line no: 57 term : unary_expression

1

At line no: 57 simple_expression : term 

1

At line no: 57 rel_expression : simple_expression

1

At line no: 57 logic_expression : rel_expression 

1

At line no: 57 arguments : logic_expression

1

At line no: 57 factor : CONST_INT

2

At line no: 57 unary_expression : factor

2

At line no: 57 term : unary_expression

2

At line no: 57 factor : CONST_INT

3

At line no: 57 unary_expression : factor

3

At line no: 57 term : term MULOP unary_expression

2*3

At line no: 57 simple_expression : term 

2*3

At line no: 57 rel_expression : simple_expression

2*3

At line no: 57 logic_expression : rel_expression 

2*3

At line no: 57 arguments : arguments COMMA logic_expression

1,2*3

At line no: 57 argument_list : arguments

1,2*3

At line no: 57 factor : ID LPAREN argument_list RPAREN

var(1,2*3)

At line no: 57 unary_expression : factor

var(1,2*3)

At line no: 57 term : unary_expression

var(1,2*3)

At line no: 57 simple_expression : term 

var(1,2*3)

At line no: 57 factor : CONST_FLOAT 

3.5

At line no: 57 unary_expression : factor

3.5

At line no: 57 term : unary_expression

3.5

At line no: 57 factor : CONST_INT

2

At line no: 57 unary_expression : factor

2

At line no: 57 term : term MULOP unary_expression

3.5*2

At line no: 57 simple_expression : simple_expression ADDOP term 

var(1,2*3)+3.5*2

At line no: 57 rel_expression : simple_expression

var(1,2*3)+3.5*2

At line no: 57 logic_expression : rel_expression 

var(1,2*3)+3.5*2

At line no: 57 expression : variable ASSIGNOP logic_expression

d=var(1,2*3)+3.5*2

At line no: 57 expression_statement : expression SEMICOLON

d=var(1,2*3)+3.5*2;


At line no: 57 statement : expression_statement

d=var(1,2*3)+3.5*2;


At line no: 57 statements : statements statement

int c,i,a[2],j;
float d;
c=4;
d=9.5;
j=9;
{
a[0]=1;
a[1]=var(c,j);
}
i=a[0]+a[1];
if(c<a[0]){
c=7;
}
if(c<d){
a[1]=-a[1];
;
}
elseif(c<2*d){
a[0]=!(7<5);
}
else{
d=2;
}
for(c=0;
c<2*d+3;
c++){
a[0]=a[0]*4;
}
while(a[0]--){
c=c-2;
}
print(c);
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;


At line no: 58 factor : CONST_INT

0

At line no: 58 unary_expression : factor

0

At line no: 58 term : unary_expression

0

At line no: 58 simple_expression : term 

0

At line no: 58 rel_expression : simple_expression

0

At line no: 58 logic_expression : rel_expression 

0

At line no: 58 expression : logic_expression

0

At line no: 58 statement : RETURN expression SEMICOLON

return 0;


At line no: 58 statements : statements statement

int c,i,a[2],j;
float d;
c=4;
d=9.5;
j=9;
{
a[0]=1;
a[1]=var(c,j);
}
i=a[0]+a[1];
if(c<a[0]){
c=7;
}
if(c<d){
a[1]=-a[1];
;
}
elseif(c<2*d){
a[0]=!(7<5);
}
else{
d=2;
}
for(c=0;
c<2*d+3;
c++){
a[0]=a[0]*4;
}
while(a[0]--){
c=c-2;
}
print(c);
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;


At line no: 59 compound_statement : LCURL statements RCURL

{
int c,i,a[2],j;
float d;
c=4;
d=9.5;
j=9;
{
a[0]=1;
a[1]=var(c,j);
}
i=a[0]+a[1];
if(c<a[0]){
c=7;
}
if(c<d){
a[1]=-a[1];
;
}
elseif(c<2*d){
a[0]=!(7<5);
}
else{
d=2;
}
for(c=0;
c<2*d+3;
c++){
a[0]=a[0]*4;
}
while(a[0]--){
c=c-2;
}
print(c);
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;
}


ScopeTable # 1.3
 4 --> < a : ID > 
 6 --> < c : ID > 
 7 --> < d : ID > 
 12 --> < i : ID > 
 13 --> < j : ID > 

ScopeTable # 1
 9 --> < ab : ID > 
 14 --> < foo : ID > 
 18 --> < main : ID > 
 19 --> < var : ID > 
 27 --> < x : ID > 
 28 --> < y : ID > 
 29 --> < z : ID > 

ScopeTable with id 1.3 removed

At line no: 59 func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int c,i,a[2],j;
float d;
c=4;
d=9.5;
j=9;
{
a[0]=1;
a[1]=var(c,j);
}
i=a[0]+a[1];
if(c<a[0]){
c=7;
}
if(c<d){
a[1]=-a[1];
;
}
elseif(c<2*d){
a[0]=!(7<5);
}
else{
d=2;
}
for(c=0;
c<2*d+3;
c++){
a[0]=a[0]*4;
}
while(a[0]--){
c=c-2;
}
print(c);
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;
}


At line no: 59 unit : func_definition

int main(){
int c,i,a[2],j;
float d;
c=4;
d=9.5;
j=9;
{
a[0]=1;
a[1]=var(c,j);
}
i=a[0]+a[1];
if(c<a[0]){
c=7;
}
if(c<d){
a[1]=-a[1];
;
}
elseif(c<2*d){
a[0]=!(7<5);
}
else{
d=2;
}
for(c=0;
c<2*d+3;
c++){
a[0]=a[0]*4;
}
while(a[0]--){
c=c-2;
}
print(c);
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;
}


At line no: 59 program : program unit

int x,y,z;
float ab;
void foo();
int var(int a,int b);
int var(int a,int b){
a=a+y*2;
return a+b;
}
void foo(){
x=2;
y=x-5;
}
int main(){
int c,i,a[2],j;
float d;
c=4;
d=9.5;
j=9;
{
a[0]=1;
a[1]=var(c,j);
}
i=a[0]+a[1];
if(c<a[0]){
c=7;
}
if(c<d){
a[1]=-a[1];
;
}
elseif(c<2*d){
a[0]=!(7<5);
}
else{
d=2;
}
for(c=0;
c<2*d+3;
c++){
a[0]=a[0]*4;
}
while(a[0]--){
c=c-2;
}
print(c);
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3.5*2;
return 0;
}


At line no: 60 start : program



