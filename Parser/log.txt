Line 1: type_specifier : INT

int

Line 1: declaration_list : ID

x

Line 1: declaration_list : declaration_list COMMA ID

x,y

Line 1: declaration_list : declaration_list COMMA ID

x,y,z

Line 1: var_declaration : type_specifier declaration_list SEMICOLON

int x,y,z;


Line 1: unit : var_declaration

int x,y,z;


Line 1: program : unit

int x,y,z;


Line 4: type_specifier : INT

int

Line 5: type_specifier : INT

int

Line 5: declaration_list : ID

c

Line 5: declaration_list : declaration_list COMMA ID

c,i

Line 5: declaration_list : declaration_list COMMA ID

c,i,j

Line 5: declaration_list : declaration_list COMMA ID

c,i,j,d

Line 5: declaration_list : declaration_list COMMA ID LTHIRD CONST_INT RTHIRD

c,i,j,d,e[4]

Line 5: var_declaration : type_specifier declaration_list SEMICOLON

int c,i,j,d,e[4];


Line 5: statement : var_declaration

int c,i,j,d,e[4];


Line 5: statements : statement

int c,i,j,d,e[4];


Line 6: variable : ID

j

Line 6: factor : CONST_INT

2

Line 6: unary_expression : factor

2

Line 6: term : unary_expression

2

Line 6: factor : CONST_INT

3

Line 6: unary_expression : factor

3

Line 6: term : term MULOP unary_expression

2*3

Line 6: simple_expression : term 

2*3

Line 6: factor : CONST_INT

5

Line 6: unary_expression : factor

5

Line 6: term : unary_expression

5

Line 6: factor : CONST_INT

3

Line 6: unary_expression : factor

3

Line 6: term : term MULOP unary_expression

5%3

Line 6: simple_expression : term 

5%3

Line 6: factor : CONST_INT

4

Line 6: unary_expression : factor

4

Line 6: term : unary_expression

4

Line 6: simple_expression : term 

4

Line 6: rel_expression : simple_expression RELOP simple_expression

5%3<4

Line 6: factor : CONST_INT

8

Line 6: unary_expression : factor

8

Line 6: term : unary_expression

8

Line 6: simple_expression : term 

8

Line 6: rel_expression : simple_expression

8

Line 6: logic_expression : rel_expression LOGICOP rel_expression

5%3<4&&8

Line 6: expression : logic expression

5%3<4&&8

Line 6: factor : LPAREN expression RPAREN

(5%3<4&&8)

Line 6: unary_expression : factor

(5%3<4&&8)

Line 6: term : unary_expression

(5%3<4&&8)

Line 6: simple_expression : simple_expression ADDOP term 

2*3+(5%3<4&&8)

Line 6: rel_expression : simple_expression

2*3+(5%3<4&&8)

Line 6: factor : CONST_INT

2

Line 6: unary_expression : factor

2

Line 6: term : unary_expression

2

Line 6: simple_expression : term 

2

Line 6: rel_expression : simple_expression

2

Line 6: logic_expression : rel_expression LOGICOP rel_expression

2*3+(5%3<4&&8)||2

Line 6: expression : variable ASSIGNOP logic_expression

j=2*3+(5%3<4&&8)||2

Line 6: expression_statement : expression SEMICOLON

j=2*3+(5%3<4&&8)||2;


Line 6: statement : expression_statement

j=2*3+(5%3<4&&8)||2;


Line 6: statements : statements statement

int c,i,j,d,e[4];
j=2*3+(5%3<4&&8)||2;


Line 7: variable : ID

d

Line 7: factor : CONST_INT

1

Line 7: unary_expression : factor

1

Line 7: term : unary_expression

1

Line 7: simple_expression : term 

1

Line 7: rel_expression : simple_expression

1

Line 7: logic_expression : rel_expression 

1

Line 7: arguments : logic_expression

1

Line 7: factor : CONST_INT

2

Line 7: unary_expression : factor

2

Line 7: term : unary_expression

2

Line 7: factor : CONST_INT

3

Line 7: unary_expression : factor

3

Line 7: term : term MULOP unary_expression

2*3

Line 7: simple_expression : term 

2*3

Line 7: rel_expression : simple_expression

2*3

Line 7: logic_expression : rel_expression 

2*3

Line 7: arguments : arguments COMMA logic_expression

1,2*3

Line 7: argument_list : arguments

1,2*3

Line 7: factor : ID LPAREN argument_list RPAREN

Error at line 7:  Undeclared function var

var(1,2*3)

Line 7: unary_expression : factor

var(1,2*3)

Line 7: term : unary_expression

var(1,2*3)

Line 7: simple_expression : term 

var(1,2*3)

Line 7: factor : CONST_INT

3

Line 7: unary_expression : factor

3

Line 7: term : unary_expression

3

Line 7: factor : CONST_INT

2

Line 7: unary_expression : factor

2

Line 7: term : term MULOP unary_expression

3*2

Line 7: simple_expression : simple_expression ADDOP term 

var(1,2*3)+3*2

Line 7: rel_expression : simple_expression

var(1,2*3)+3*2

Line 7: logic_expression : rel_expression 

var(1,2*3)+3*2

Line 7: expression : variable ASSIGNOP logic_expression

d=var(1,2*3)+3*2

Line 7: expression_statement : expression SEMICOLON

d=var(1,2*3)+3*2;


Line 7: statement : expression_statement

d=var(1,2*3)+3*2;


Line 7: statements : statements statement

int c,i,j,d,e[4];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3*2;


Line 8: factor : CONST_INT

0

Line 8: unary_expression : factor

0

Line 8: term : unary_expression

0

Line 8: simple_expression : term 

0

Line 8: rel_expression : simple_expression

0

Line 8: logic_expression : rel_expression 

0

Line 8: expression : logic expression

0

Line 8: statement : RETURN expression SEMICOLON

return 0;


Line 8: statements : statements statement

int c,i,j,d,e[4];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3*2;
return 0;


Line 9: compound_statement : LCURL statements RCURL

{
int c,i,j,d,e[4];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3*2;
return 0;
}


ScopeTable # 1.1
 9 --> < c , ID > 
 10 --> < d , ID > 
 11 --> < e , ID > 
 15 --> < i , ID > 
 16 --> < j , ID > 

ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > < main , ID > 
 2 --> < z , ID > 

Line 9: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main(){
int c,i,j,d,e[4];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3*2;
return 0;
}


Line 9: unit : func_definition

int main(){
int c,i,j,d,e[4];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3*2;
return 0;
}


Line 9: program : program unit

int x,y,z;
int main(){
int c,i,j,d,e[4];
j=2*3+(5%3<4&&8)||2;
d=var(1,2*3)+3*2;
return 0;
}


Line 10: start : program



ScopeTable # 1
 0 --> < x , ID > 
 1 --> < y , ID > < main , ID > 
 2 --> < z , ID > 


Total lines: 10
Total errors: 1
